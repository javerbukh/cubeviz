<<<<<<< HEAD
# We set the language to c because python isn't supported on the MacOS X nodes
# on Travis. However, the language ends up being irrelevant anyway, since we
# install Python ourselves using conda.
language: c

os:
    - linux

# Setting sudo to false opts in to Travis-CI container-based builds.
sudo: false

# The apt packages below are needed for sphinx builds. A full list of packages
# that can be included can be found here:
#
# https://github.com/travis-ci/apt-package-whitelist/blob/master/ubuntu-precise

#addons:
#    apt:
#        packages:
#            - graphviz
#            - texlive-latex-extra
#            - dvipng

env:
    global:

        # The following versions are the 'default' for tests, unless
        # overridden underneath. They are defined here in order to save having
        # to repeat them for all configurations.
        - PYTHON_VERSION=3.6
        - NUMPY_VERSION=stable
        - ASTROPY_VERSION=stable
        # Pull specviz from github until it is released on PyPi and/or conda
        - SPECVIZ_GIT='git+https://github.com/spacetelescope/specviz#egg=specviz'
        - MAIN_CMD='python setup.py'
        - SETUP_CMD='test'
        - EVENT_TYPE='pull_request push'

        # List other runtime dependencies for the package that are available as
        # conda packages here.
        - CONDA_DEPENDENCIES='pyqt matplotlib scipy glue-core>=0.12 glueviz'

        # List other runtime dependencies for the package that are available as
        # pip packages here.
        - PIP_DEPENDENCIES="$SPECVIZ_GIT"

        # Conda packages for affiliated packages are hosted in channel
        # "astropy" while builds for astropy LTS with recent numpy versions
        # are in astropy-ci-extras. If your package uses either of these,
        # add the channels to CONDA_CHANNELS along with any other channels
        # you want to use.
        - CONDA_CHANNELS='astropy-ci-extras astropy glueviz/label/dev'

        # If there are matplotlib or other GUI tests, uncomment the following
        # line to use the X virtual framebuffer.
        - SETUP_XVFB=True

    matrix:
        # Make sure that egg_info works without dependencies
        - PYTHON_VERSION=3.5 SETUP_CMD='egg_info'
        - PYTHON_VERSION=3.6 SETUP_CMD='egg_info'
=======
language: c

sudo: false

addons:
  apt:
    packages:
      - ruby

notifications:
  email: false

env:
  global:
    # We add astropy-ci-extras to have the latest version of Astropy with older Numpy versions.
    - CONDA_CHANNELS="astropy-ci-extras astropy glueviz"
    - PYTEST_ARGS="--cov glue -vs"
    - ASTROPY_VERSION=stable
    - NUMPY_VERSION=1.13
    - NO_CFG_FILES=false
    - QT_PKG=pyqt5
    - SETUP_XVFB=True
    - CONDA_DEPENDENCIES="pip dill ipython matplotlib scipy cython h5py pygments pyzmq scikit-image pandas sphinx xlrd pillow pytest mock coverage pyyaml sphinx_rtd_theme qtpy traitlets ipykernel qtconsole spectral-cube pytest-cov mpl-scatter-density"
    - PIP_DEPENDENCIES="coveralls pyavm astrodendro awscli plotly objgraph"
    - PIP_FALLBACK=false
    - REMOVE_INSTALL_REQUIRES=0
    - secure: NvQVc3XmmjXNVKrmaD31IgltsOImlnt3frAl4wU0pM223iejr7V57hz/V5Isx6sTANWEiRBMG27v2T8e5IiB7DQTxFUleZk3DWXQV1grw/GarEGUawXAgwDWpF0AE/7BRVJYqo2Elgaqf28+Jkun8ewvfPCiEROD2jWEpnZj+IQ=
    - secure: "SU9BYH8d9eNigypG3lC83s0NY6Mq9AHGKXyEGeXDtz1npJIC1KHdzPMP1v1K3dzCgl1p6ReMXPjZMCENyfNkad/xvzTzGk0Nu/4BjihrUPV6+ratVeLpv0JLm8ikh8q+sZURkdtzUOlds+Hfn5ku4LdpT87tcKHY9TINAGA34ZM="
    - AWS_ACCESS_KEY_ID: AKIAI2ERWDHLW3W24X3A
    - AWS_SECRET_ACCESS_KEY: $AWS_SECRET_KEY_ID

stages:
    - name: Initial
    - name: Full
>>>>>>> 0c2af110d9ed7d8513be86820fe64ae19e2e54d9

matrix:

    # Don't wait for allowed failures
    fast_finish: true

    include:
<<<<<<< HEAD
        # Try MacOS X
        - os: osx
          env: SETUP_CMD='test'

        # Do a coverage test.
        - os: linux
          env: SETUP_CMD='test --coverage'

        # Test against Python 3.5
        - os: linux
          env: PYTHON_VERSION=3.5

        # Check for sphinx doc build warnings - we do this first because it
        # may run for a long time
        #- os: linux
        #  env: SETUP_CMD='build_docs -w'

        # Try building against Astropy dev
        - os: linux
          env: ASTROPY_VERSION=development
               EVENT_TYPE='pull_request push cron'

        # Do a PEP8 test with pycodestyle
        - os: linux
          env: MAIN_CMD='pycodestyle cubeviz --count' SETUP_CMD=''

    allow_failures:
        # Do a PEP8 test with pycodestyle
        # (allow to fail unless your code completely compliant)
        - os: linux
          env: MAIN_CMD='pycodestyle cubeviz --count' SETUP_CMD=''

install:

    # We now use the ci-helpers package to set up our testing environment.
    # This is done by using Miniconda and then using conda and pip to install
    # dependencies. Which dependencies are installed using conda and pip is
    # determined by the CONDA_DEPENDENCIES and PIP_DEPENDENCIES variables,
    # which should be space-delimited lists of package names. See the README
    # in https://github.com/astropy/ci-helpers for information about the full
    # list of environment variables that can be used to customize your
    # environment. In some cases, ci-helpers may not offer enough flexibility
    # in how to install a package, in which case you can have additional
    # commands in the install: section below.

    - git clone git://github.com/astropy/ci-helpers.git
    - source ci-helpers/travis/setup_conda.sh

    # As described above, using ci-helpers, you should be able to set up an
    # environment with dependencies installed using conda and pip, but in some
    # cases this may not provide enough flexibility in how to install a
    # specific dependency (and it will not be able to install non-Python
    # dependencies). Therefore, you can also include commands below (as
    # well as at the start of the install section or in the before_install
    # section if they are needed before setting up conda) to install any
    # other dependencies.

script:
   - $MAIN_CMD $SETUP_CMD

after_success:
    # If coveralls.io is set up for this package, uncomment the line below.
    # The coveragerc file may be customized as needed for your package.
    # - if [[ $SETUP_CMD == *coverage* ]]; then coveralls --rcfile='cubeviz/tests/coveragerc'; fi
=======

        - os: linux
          stage: Initial
          env: PYTHON_VERSION=2.7

        - os: linux
          stage: Initial
          env: PYTHON_VERSION=3.6

        - os: osx
          stage: Full
          env: PYTHON_VERSION=2.7

        - os: osx
          stage: Full
          env: PYTHON_VERSION=3.6

        # Astropy dev
        - os: linux
          stage: Full
          env: PYTHON_VERSION=3.6
               ASTROPY_VERSION=dev

        # Numpy dev
        - os: linux
          stage: Full
          env: PYTHON_VERSION=3.6
               NUMPY_VERSION=dev

        # The following configuration tests that glue functions with minimal
        # dependencies.
        - os: linux
          stage: Full
          env: PYTHON_VERSION=3.6
               PYTEST_ARGS="--cov glue"
               CONDA_DEPENDENCIES="pip setuptools pandas mock matplotlib qtpy ipython ipykernel qtconsole mpl-scatter-density"
               PIP_DEPENDENCIES="pytest-cov coveralls"
               REMOVE_INSTALL_REQUIRES=1

        - os: linux
          stage: Full
          env: PYTHON_VERSION=3.6
               DOC_TRIGGER=1
               PYTEST_ARGS="--cov glue --no-optional-skip"
               NO_CFG_FILES=true

        # Test with older package versions:

        - os: linux
          stage: Full
          env: PYTHON_VERSION=2.7
               MATPLOTLIB_VERSION=1.5
               NUMPY_VERSION=1.11
               PANDAS_VERSION=0.18
               SETUPTOOLS=1.0
               IPYTHON_VERSION=4
               QT_PKG=pyqt

        # Test with PySide, but due to segmentation faults, mark as an
        # allowed failure.
        - os: linux
          stage: Full
          env: PYTHON_VERSION=2.7
               QT_PKG=pyside

        # Test without any Qt installation, which will also cause all qt
        # sub-directories to be removed, to make sure that no non-Qt code has
        # any dependence on Qt code.
        - os: linux
          stage: Full
          env: PYTHON_VERSION=3.6
               QT_PKG=False

    allow_failures:

      - os: linux
        env: PYTHON_VERSION=2.7 NUMPY_VERSION=dev
             PIP_DEPENDENCIES="pytest-cov coveralls pyavm astrodendro awscli plotly"

      - os: linux
        env: PYTHON_VERSION=2.7 QT_PKG=pyside

before_install:

  # Prepare dependency list. Note that in future, PyQt5 will be the pyqt conda
  # package with a version of 5.x rather than a pyqt5 package, so we explicitly
  # request pyqt=4 for PyQt4.
  - if [[ $QT_PKG == pyside ]]; then export CONDA_DEPENDENCIES="pyside "$CONDA_DEPENDENCIES; fi
  - if [[ $QT_PKG == pyqt ]]; then export CONDA_DEPENDENCIES="pyqt=4 "$CONDA_DEPENDENCIES; fi
  - if [[ $QT_PKG == pyqt5 ]]; then export CONDA_DEPENDENCIES="pyqt=5 "$CONDA_DEPENDENCIES; fi

  # Documentation dependencies
  - if [ $DOC_TRIGGER ]; then export PIP_DEPENDENCIES="sphinx-automodapi numpydoc requests "$PIP_DEPENDENCIES; fi

  # Install ci-helpers and set up conda
  - git clone git://github.com/astropy/ci-helpers.git
  - source ci-helpers/travis/setup_conda.sh

  # setup tools to trigger mac buildbot
  - if [ $TRAVIS_PULL_REQUEST == false && $APP_TRIGGER ]; then source .setup_app_trigger.sh; fi
  - if [ $TRAVIS_BRANCH = master ]; then export S3_DIR=latest; else export S3_DIR=$TRAVIS_BRANCH; fi

  # now set up a plugin configuration file with some plugins disabled. This is
  # to make sure that when we run the tests, glue will ignore this
  # configuration and will instead run tests for all plugins.
  - if [[ $NO_CFG_FILES == false ]]; then mkdir ~/.glue; printf "[plugins]\nspectrum_tool = 0\n" >> ~/.glue/plugins.cfg; fi

install:

  - LC_ALL=C

  # Uninstall PyQt if we are using PySide
  - if [ $QT_PKG == pyside ]; then conda remove --no-pin --force pyqt sip || true; fi

  # Uninstall any version of Qt if QT_PKG is False, and remove all qt
  # sub-directories
  - if [[ $QT_PKG == False ]]; then
      sed -i.bak '/qtpy/d' setup.py;
      sed -i.bak '/sys.exit(1)/d' setup.py;
      conda remove --no-pin --force qtpy || true;
      conda remove --no-pin --force pyqt || true;
      conda remove --no-pin --force pyside || true;
      conda remove --no-pin --force qt || true;
      pip uninstall --yes qtpy || true;
      find . -name "qt" -type d -exec rm -r {} \; || true;
      rm glue/external/qt.py || true;
      sed -i.bak 's/in REQUIRED_PLUGINS/in REQUIRED_PLUGINS and False/' glue/main.py || true;
    fi

  # Set MPLBACKEND to Agg by default - this will get overriden if Qt is present,
  # but it avoids having Matplotlib default to the osx backend on MacOS X
  - export MPLBACKEND='Agg';

  # List installed packages - use the export command so as to be able to
  # reproduce the exact environment locally. Do this before installing glue
  # since we don't want glue to appear in the list of packages for the
  # environment.
  - conda env export

  # If REMOVE_INSTALL_REQUIRES is set, then we need to get rid of the
  # install_requires section in setup.py. This is used for the absolute
  # minimal build to make sure that things still work. In practice,
  # glue could never be run with such a restrictive set of dependencies
  # because install_requires will not be empty for users, but it ensures
  # that if we change some of the dependencies from required to optional
  # in future (apart from a core few), things will still work.
  - if [[ $REMOVE_INSTALL_REQUIRES == 1 ]]; then sed -i.bak s/install_requires=install_requires/install_requires=[]/g setup.py; fi

  # We need to install glue in order to make sure that the entry points are
  # installed.
  - pip install . --no-deps

  # Check that all the plugins load correctly
  - python -c 'from glue.logger import logger; logger.setLevel("DEBUG"); from glue.main import load_plugins; load_plugins()'

  # List installed packages again - just to check if any packages got installed
  # in the previous step.
  - conda env export

script:

  # In the following, we make sure there are no font sizes hard-coded in *.ui files.
  # We do this because the default application font size may change on different
  # platforms, but the sizes in ui files are absolute, which can lead to mismatched
  # font sizes.
  - find glue -name "*.ui" -exec grep "pointsize" {} \; >& font.log
  - test ! -s font.log

  - if [[ $QT_PKG == False ]]; then glue --version; fi

  - python setup.py test -a "$PYTEST_ARGS"

  # In the following, we use separate if statements for each line, to make
  # sure the exit code from each one is taken into account for the overall
  # exit code.
  - if [ $DOC_TRIGGER ]; then cd doc; make html linkcheck 2> warnings.log; cd ..; fi
  - if [ $DOC_TRIGGER ]; then cat doc/warnings.log; fi
  - if [ $DOC_TRIGGER ]; then grep -v "numpy.dtype size changed" doc/warnings.log | grep -v "return f(\*args, \*\*kwds)" || true > doc/warnings_filt.log; fi
  - if [ $DOC_TRIGGER ]; then cat doc/warnings_filt.log; fi
  # make sure stderr was empty, i.e. no warnings
  - if [ $DOC_TRIGGER ]; then test ! -s doc/warnings_filt.log; fi

  # Check for any broken links, ignore 'redirected with Found'
  - if [ $DOC_TRIGGER ]; then grep -v "redirected with Found" doc/_build/linkcheck/output.txt || true > doc/_build/linkcheck/output_no_found_redirect.txt; fi
  - if [ $DOC_TRIGGER ]; then test ! -s doc/_build/linkcheck/output_no_found_redirect.txt; fi

after_success:

  # Coverage testing
  - if [[ $QT_PKG != False ]]; then coveralls; fi

  # Trigger the building of the MacOS X app in the Travis-MacGlue repo
  - if [ $TRAVIS_PULL_REQUEST == false && $APP_TRIGGER ]; then ./.trigger_app_build.sh; fi
>>>>>>> 0c2af110d9ed7d8513be86820fe64ae19e2e54d9
